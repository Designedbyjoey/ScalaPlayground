Spreadsheet Test - Notes
-------------------------

1. Didn't see the need for a cell class - just an implementation that adds refactoring friction

2. Test is too prescriptive and granular - should not be giving me precise details about class names and methods - should be giving me requirements and letting me do them as I see fit

3. The test takes a bottom-up approach to developing, when I prefer a top down approach - starting with acceptance tests.

4. Personally, I do not think ranges needed to be modelled in an object-oriented way. The code is very simple, and I don't think the extra abstractions that could be added - cell, range etc add any value at all.

When choosing abstractions, the most important concern is managing complexity - how easy will it be for other to people to understand. Too monolithic and important concepts will be hidden away. But equally, an explosion of classes can also make code bases very hard to read. I blogged about this here: http://ntcoding.blogspot.co.uk/2012/09/method-per-class-is-bit-smelly.html I've worked on code bases like these, and a lot of time is wasted piecing together bits of logic.

My philosophy is to wait - wait until the code is complicated enough that an abstraction will make it clearer. In this case, I've modelled ranges as tuples, and the method name "getRange" clarifies my intent perfectly.

I don't want to make this simple spreadsheet application seem more complicated than it is by adding lots of classes. For me if you can keep all your code in one place, and still understand it easily, then that's the perfect level of granularity. Looking at the spreadsheet class there is very little in it (thanks to Scala :) ).

5. If this application was larger, I would certainly think about abstractions to represent ranges etc. Relying on tuples is great, until the structure changes, then you have to update about 20 method signatures, test etc.

6. I chose to put the mathematical functions, sum etc, in a separate class. I was borderline because the spreadsheet class was still very thin on logic. By keeping all the logic together, I would also have had the benefit of being able to look for abstractions later, which might lead me to better abstractions. 

This is just a small application, with no real context, so all of these decisions are very trivial and inconsequential.

7. All the object-oriented features needed in this application, in just my opinion of course, are really for the functions which are polymorphic
